package negocio;

import static org.junit.Assert.*;

import java.util.ArrayList;
import java.util.List;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

public class GerContasTest_getContasDoBanco {

	GerenciadoraContas gerContas;
	ArrayList<ContaCorrente> listaContas = new ArrayList<ContaCorrente>();
	
	ContaCorrente conta1;
	ContaCorrente conta2;
	ContaCorrente conta3;
	
	
	@Before
	public void setup() {
		/* =============== Criacao do cenario =============== */
		
		conta1 = new ContaCorrente(1, 1000, true);
		conta2 = new ContaCorrente(2, 0, false);
		conta3 = new ContaCorrente(3, 200, true);
		
		listaContas.add(conta1);
		listaContas.add(conta2);
		listaContas.add(conta3);
		
		gerContas = new GerenciadoraContas(listaContas);
		
	}
	
	@After
	public void tearDown() {
		gerContas.removeConta(conta1.getId());
		gerContas.removeConta(conta2.getId());
		gerContas.removeConta(conta3.getId());
	}
	
	/* Teste para verificar o retorno de todos os clientes do banco, contas ativas e inativas
	 * 
	 * @author Willian Ronaldo
	 * @date 17/06/2020
	 * */
	@Test
	public void testGetContasDoBanco() {
		
		int totalContas = gerContas.getContasDoBanco().size();
		
		assertNotNull("Total de contas do banco está null", gerContas);
		assertEquals("Falha ao retornar todas as contas do banco", 3, totalContas);
	}
	
	/* Teste para verificar o retorno de todas as contas inativas
	 * 
	 * @author Willian Ronaldo
	 * @date 17/06/2020
	 * */
	@Test
	public void testGetContasDoBanco_inativas() {
		
		java.util.List<ContaCorrente> clientesDoBanco = gerContas.getContasDoBanco();
		
		int contasInativas = 0;
		
		for (int i = 0; i < clientesDoBanco.size(); i++) {
			if(!clientesDoBanco.get(i).isAtiva()) {
				contasInativas++;
			}
		}
		
		assertEquals("Quantidade de contas inativas divergentes com o esperado", contasInativas, 1);
		
	}
	
	/* Teste para retornar todas as contas ativas do banco
	 * @author Willian Ronaldo
	 * @date 17/06/2020
	 * */
	@Test
	public void testGetContasDoBanco_ativas() {
		java.util.List<ContaCorrente> listaContas = gerContas.getContasDoBanco();
		int contasAtivas = 0 ;
		
		for(int i = 0 ; i < listaContas.size() ; i++) {
			if(listaContas.get(i).isAtiva()) {
				contasAtivas++;
			}
		}
		
		assertEquals("Quantidade de contas ativas com divergencia no teste", contasAtivas, 2);
	}
	
	/* Teste para pesquisar uma conta, nesse caso ela existe
	 * 
 	 * @author Willian Ronaldo
	 * @date 17/06/2020
	 * */
	@Test
	public void testPesquisaConta_contaExiste() {
			
		int idContaPesquisar = 3;
		boolean contaExiste = false;
		
		for(int i = 0; i < gerContas.getContasDoBanco().size() ; i++) {
			int idContaFor = gerContas.getContasDoBanco().get(i).getId();
			if( idContaFor == idContaPesquisar) {
				contaExiste = true;
			}
		}
		
		assertTrue("Conta não existe", contaExiste);
		
	}
	
	/* Teste para pesquisar uma conta, nesse caso ela não existe
	 * 
 	 * @author Willian Ronaldo
	 * @date 17/06/2020
	 * */
	@Test
	public void testPesquisaConta_contaNaoExiste() {
		
		int idContaPesquisar = 4;
		boolean naoExisteConta= true;
		
		for(int i = 0; i < gerContas.getContasDoBanco().size() ; i++) {
			int idContaFor = gerContas.getContasDoBanco().get(i).getId();
			if( idContaFor == idContaPesquisar) {
				naoExisteConta = false;
			}
		}
		
		assertTrue("Existe uma conta corrente quando nao deveria existir", naoExisteConta);
	}
	
	/* Este teste garante que a conta que está sendo adicionada seja de saldo positiva e esteja ativa
	 * 
	 * @author Willia Ronaldo
	 * @date 17/06/2020
	 * */
	@Test
	public void testAdicionarConta_saldoPositivoAtiva() {		
		
		ArrayList<ContaCorrente> _listaContas = new ArrayList<ContaCorrente>();
		
		ContaCorrente _conta1 = new ContaCorrente(0, 100, true);
		
		_listaContas.add(_conta1);
		
		GerenciadoraContas _gerContasLocal = new GerenciadoraContas(_listaContas);
		
		for(int i = 0; i < _gerContasLocal.getContasDoBanco().size(); i++) {
			double saldo = _gerContasLocal.getContasDoBanco().get(i).getSaldo();
			boolean isAtivo = _gerContasLocal.getContasDoBanco().get(i).isAtiva();
	
			assertTrue("O saldo da conta deve ser maior que 0", saldo > 0);
			assertTrue("A conta deve estar ativa", isAtivo);
		}
		
	}
	
	/* Este teste garante que a conta que está sendo adicionada seja de saldo positiva e esteja inativa
	 * 
	 * @author Willia Ronaldo
	 * @date 17/06/2020
	 * */
	@Test
	public void testAdicionarConta_saldoPositivoInativa() {
		ArrayList<ContaCorrente> _listaContas = new ArrayList<ContaCorrente>();
		
		ContaCorrente _conta1 = new ContaCorrente(0, 100, false);
		
		_listaContas.add(_conta1);
		
		GerenciadoraContas _gerContasLocal = new GerenciadoraContas(_listaContas);
		
		for(int i = 0; i < _gerContasLocal.getContasDoBanco().size(); i++) {
			double saldo = _gerContasLocal.getContasDoBanco().get(i).getSaldo();
			boolean isAtivo = _gerContasLocal.getContasDoBanco().get(i).isAtiva();
	
			assertTrue("O saldo da conta deve ser maior que 0", saldo > 0);
			assertFalse("A conta deve estar inativa", isAtivo);
		}
	}
		
	/* Este teste adicionar uma conta com saldo negativo ativa
	 * 
	 * @author Willia Ronaldo
	 * @date 17/06/2020
	 * */
	@Test
	public void testAdicionarConta_saldoNegativoAtiva() {

		ArrayList<ContaCorrente> _listaContas = new ArrayList<ContaCorrente>();
		
		ContaCorrente _conta1 = new ContaCorrente(0, -100, true);
		
		_listaContas.add(_conta1);
		
		GerenciadoraContas _gerContasLocal = new GerenciadoraContas(_listaContas);
		
		for(int i = 0; i < _gerContasLocal.getContasDoBanco().size(); i++) {
			double saldo = _gerContasLocal.getContasDoBanco().get(i).getSaldo();
			boolean isAtivo = _gerContasLocal.getContasDoBanco().get(i).isAtiva();
	
			assertTrue("O saldo da conta deve ser menor que 0", saldo < 0);
			assertTrue("A conta deve estar ativa", isAtivo);
		}
		
		assertEquals("Quantidade de contas no banco com divergencia sobre o que era esperado", 1, _gerContasLocal.getContasDoBanco().size());
	}
	
	/* Este teste garante que a conta que está sendo adicionada seja de saldo negativo e esteja inativa
	 * 
	 * @author Willia Ronaldo
	 * @date 17/06/2020
	 * */
	@Test
	public void testAdicionarConta_saldoNegativoInativa() {
		
		ArrayList<ContaCorrente> _listaContas = new ArrayList<ContaCorrente>();
		
		ContaCorrente conta = new ContaCorrente(0, -100, false);
		
		_listaContas.add(conta);
		
		GerenciadoraContas _gerContasLocal = new GerenciadoraContas(_listaContas);
		
		for(int i = 0 ; i < _gerContasLocal.getContasDoBanco().size(); i++) {
			boolean isAtiva = _gerContasLocal.getContasDoBanco().get(i).isAtiva();
			double saldo = _gerContasLocal.getContasDoBanco().get(i).getSaldo();
			
			assertTrue("O saldo deve ser negativo", saldo < 0);
			assertFalse("A conta deve estar inativa", isAtiva);
			
		}
		
		assertEquals("Quantidade de contas no banco com divergencia sobre o que era esperado", 1, _gerContasLocal.getContasDoBanco().size());
	}
	
	
	/* Teste de remoção de conta, com sucesso na operação
	 * 
	 * @author Willian Ronaldo
	 * @date 17/06/2020
	 * */
	@Test
	public void testRemoverConta_sucesso() {
		
		int _idContaRemover = 1;
		boolean contaRemovida = false;
		
		for(int i = 0; i < gerContas.getContasDoBanco().size() ; i++ ) {
			ContaCorrente contaParaRemover = gerContas.getContasDoBanco().get(i);
			
			if(contaParaRemover.getId() == _idContaRemover) {
				gerContas.removeConta(_idContaRemover);
				contaRemovida = true;
			}
		}
		
		assertTrue("Erro ao remover conta corrente",contaRemovida);
		
		for(int i = 0; i < gerContas.getContasDoBanco().size() ; i++ ) {
			int _idConta = gerContas.getContasDoBanco().get(i).getId();
			
			assertNotEquals("Erro ao remover conta corrente", _idConta, _idContaRemover);
		}		
	}
	
	/* Teste de remoção de conta, com erro na operação
	 * 
	 * @author Willian Ronaldo
	 * @date 17/06/2020
	 * */
	@Test
	public void testRemoverConta_fracasso() {
		int _idRemoverContaFracasso = 4;
		boolean contaNaoExiste = true;
		
		for(int i = 0 ; i < gerContas.getContasDoBanco().size() ; i++) {
			int _idConta = gerContas.getContasDoBanco().get(i).getId();
			
			if(_idConta == _idRemoverContaFracasso) {
				contaNaoExiste = false;
			}
		}
		
		System.out.println(contaNaoExiste);
	}
	/* Teste de remoção de conta, com uma conta inexistente
	 * 
	 * @author Willian Ronaldo
	 * @date 17/06/2020
	 * */
	@Test
	public void testRemovetConta_contaInexistente() {
		
	}
	 
	
}
