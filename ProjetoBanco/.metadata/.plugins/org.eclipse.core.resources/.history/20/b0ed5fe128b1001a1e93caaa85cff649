package negocio;

import static org.junit.Assert.*;

import java.math.BigDecimal;
import java.math.MathContext;
import java.util.ArrayList;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

public class GerContasTest_transfereValor {

	GerenciadoraContas gerContas;
	ArrayList<ContaCorrente> listaContas = new ArrayList<ContaCorrente>();
	
	ContaCorrente conta1;
	ContaCorrente conta2;
	ContaCorrente conta3;
	ContaCorrente conta4;
	
	int idContaSaldoPositivo1 = 0;
	int idContaSaldoPositivo2 = 1;
	int idContaSaldoNegativo = 2;
	int idContaSaldoZerado = 3;
	
	
	@Before
	public void setup() {
		/* =============== Criacao do cenario =============== */
		
		conta1 = new ContaCorrente(idContaSaldoPositivo1, 100, true);
		conta2 = new ContaCorrente(idContaSaldoPositivo2, 200, false);
		conta3 = new ContaCorrente(idContaSaldoNegativo, -100, true);
		conta4 = new ContaCorrente(idContaSaldoZerado, 0, true);
		
		listaContas.add(conta1);
		listaContas.add(conta2);
		listaContas.add(conta3);
		listaContas.add(conta4);
		
		gerContas = new GerenciadoraContas(listaContas);
		
	}
	
	@After
	public void tearDown() {
		gerContas.removeConta(conta1.getId());
		gerContas.removeConta(conta2.getId());
		gerContas.removeConta(conta3.getId());
	}
	
	/* Testa transferencia entre duas contas, nesse caso a transferencia sera realizada entre uma conta com valor positivo
	 * e uma conta com valor zerado
	 * 
	 * @author Willian Ronaldo
	 * @date 17/04/2020
	 * */
	@Test
	public void testTransfereValor_sucessoPositivoZerado() {

		double valorTransferencia = 50;
		
		for(int i = 0; i < gerContas.getContasDoBanco().size(); i++) {

			ContaCorrente conta = gerContas.getContasDoBanco().get(i);
			
			if(conta.getId() == idContaSaldoPositivo1) {
				
				double saldoOriginal = conta.getSaldo();
				
				gerContas.transfereValor(conta.getId(), valorTransferencia, idContaSaldoNegativo);
				
				double novoSaldo = conta.getSaldo();
				
				boolean transferenciaValida = novoSaldo == (saldoOriginal - valorTransferencia);
				
				assertTrue("Erro ao realizar transferencia", transferenciaValida);
			}
		}
	}
	
	/* Testa transferencia entre duas contas, nesse caso o saldo para transferencia sera insuficiente
	 * e a conta de destino esta vazia
	 * 
	 * @author Willian Ronaldo
	 * @date 17/04/2020
	 * */
	@Test
	public void testTransfereValor_saldoInsuficienteContaVazia() {
		double valorTransferencia = 100.1;
		double saldoOriginalDepositante = 00;
		double saldoOriginalBeneficiario = 00;
		
		for(int i = 0 ; i < gerContas.getContasDoBanco().size(); i++) {
			ContaCorrente conta = gerContas.getContasDoBanco().get(i);
			
			if(conta.getId() == idContaSaldoPositivo1) {
				saldoOriginalDepositante = conta.getSaldo();
			}
			if(conta.getId() == idContaSaldoNegativo) {
				saldoOriginalBeneficiario = conta.getSaldo();
			}
		}
		
		for(int i = 0; i < gerContas.getContasDoBanco().size(); i++) {

			ContaCorrente conta = gerContas.getContasDoBanco().get(i);
			
			if(conta.getId() == idContaSaldoPositivo1) {
				System.out.println(saldoOriginalDepositante);
				System.out.println(saldoOriginalBeneficiario);
				
				boolean transferenciaNaoRealizada = gerContas.transfereValor(conta.getId(), valorTransferencia, idContaSaldoNegativo);
				
				boolean nadaMudouNaContaDoDepositante = saldoOriginalDepositante == conta.getSaldo() - 1; // Garanto que nao foi alterado o valor da conta
				
				assertTrue("Tranferencia nao realizada mas o saldo da conta do depositante mudou", nadaMudouNaContaDoDepositante);
				assertFalse("Transferencia nao deve ser autorizada pois o saldo é insuficiente", transferenciaNaoRealizada);
			}
		}		
	}
	
	/* Testa transferencia entre duas contas, nesse caso a transferencia será realizada para uma conta inexistente
	 * 
	 * @author Willian Ronaldo
	 * @date 17/04/2020
	 * */
	@Test
	public void testTransfereValor_contaInexistente() {
		
	}
	
}
