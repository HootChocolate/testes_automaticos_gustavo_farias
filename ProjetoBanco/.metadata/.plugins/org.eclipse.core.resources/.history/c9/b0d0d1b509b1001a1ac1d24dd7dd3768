package negocio;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import java.util.ArrayList;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

public class GerContasTest_adicionarConta {

	GerenciadoraContas gerContas;
	ArrayList<ContaCorrente> listaContas = new ArrayList<ContaCorrente>();
	
	ContaCorrente conta1;
	ContaCorrente conta2;
	ContaCorrente conta3;
	
	
	@Before
	public void setup() {
		/* =============== Criacao do cenario =============== */
		
		conta1 = new ContaCorrente(1, 1000, true);
		conta2 = new ContaCorrente(2, 0, false);
		conta3 = new ContaCorrente(3, 200, true);
		
		listaContas.add(conta1);
		listaContas.add(conta2);
		listaContas.add(conta3);
		
		gerContas = new GerenciadoraContas(listaContas);
		
	}
	
	@After
	public void tearDown() {
		gerContas.removeConta(conta1.getId());
		gerContas.removeConta(conta2.getId());
		gerContas.removeConta(conta3.getId());
	}
	
	/* Este teste garante que a conta que está sendo adicionada seja de saldo positiva e esteja ativa
	 * 
	 * @author Willia Ronaldo
	 * @date 17/06/2020
	 * */
	@Test
	public void testAdicionarConta_saldoPositivoAtiva() {		
		
		ArrayList<ContaCorrente> _listaContas = new ArrayList<ContaCorrente>();
		
		ContaCorrente _conta1 = new ContaCorrente(0, 100, true);
		
		_listaContas.add(_conta1);
		
		GerenciadoraContas _gerContasLocal = new GerenciadoraContas(_listaContas);
		
		for(int i = 0; i < _gerContasLocal.getContasDoBanco().size(); i++) {
			double saldo = _gerContasLocal.getContasDoBanco().get(i).getSaldo();
			boolean isAtivo = _gerContasLocal.getContasDoBanco().get(i).isAtiva();
	
			assertTrue("O saldo da conta deve ser maior que 0", saldo > 0);
			assertTrue("A conta deve estar ativa", isAtivo);
		}
		
	}
	
	/* Este teste garante que a conta que está sendo adicionada seja de saldo positiva e esteja inativa
	 * 
	 * @author Willia Ronaldo
	 * @date 17/06/2020
	 * */
	@Test
	public void testAdicionarConta_saldoPositivoInativa() {
		ArrayList<ContaCorrente> _listaContas = new ArrayList<ContaCorrente>();
		
		ContaCorrente _conta1 = new ContaCorrente(0, 100, false);
		
		_listaContas.add(_conta1);
		
		GerenciadoraContas _gerContasLocal = new GerenciadoraContas(_listaContas);
		
		for(int i = 0; i < _gerContasLocal.getContasDoBanco().size(); i++) {
			double saldo = _gerContasLocal.getContasDoBanco().get(i).getSaldo();
			boolean isAtivo = _gerContasLocal.getContasDoBanco().get(i).isAtiva();
	
			assertTrue("O saldo da conta deve ser maior que 0", saldo > 0);
			assertFalse("A conta deve estar inativa", isAtivo);
		}
	}
		
	/* Este teste adicionar uma conta com saldo negativo ativa
	 * 
	 * @author Willia Ronaldo
	 * @date 17/06/2020
	 * */
	@Test
	public void testAdicionarConta_saldoNegativoAtiva() {

		ArrayList<ContaCorrente> _listaContas = new ArrayList<ContaCorrente>();
		
		ContaCorrente _conta1 = new ContaCorrente(0, -100, true);
		
		_listaContas.add(_conta1);
		
		GerenciadoraContas _gerContasLocal = new GerenciadoraContas(_listaContas);
		
		for(int i = 0; i < _gerContasLocal.getContasDoBanco().size(); i++) {
			double saldo = _gerContasLocal.getContasDoBanco().get(i).getSaldo();
			boolean isAtivo = _gerContasLocal.getContasDoBanco().get(i).isAtiva();
	
			assertTrue("O saldo da conta deve ser menor que 0", saldo < 0);
			assertTrue("A conta deve estar ativa", isAtivo);
		}
		
		assertEquals("Quantidade de contas no banco com divergencia sobre o que era esperado", 1, _gerContasLocal.getContasDoBanco().size());
	}
	
	/* Este teste garante que a conta que está sendo adicionada seja de saldo negativo e esteja inativa
	 * 
	 * @author Willia Ronaldo
	 * @date 17/06/2020
	 * */
	@Test
	public void testAdicionarConta_saldoNegativoInativa() {
		
		ArrayList<ContaCorrente> _listaContas = new ArrayList<ContaCorrente>();
		
		ContaCorrente conta = new ContaCorrente(0, -100, false);
		
		_listaContas.add(conta);
		
		GerenciadoraContas _gerContasLocal = new GerenciadoraContas(_listaContas);
		
		for(int i = 0 ; i < _gerContasLocal.getContasDoBanco().size(); i++) {
			boolean isAtiva = _gerContasLocal.getContasDoBanco().get(i).isAtiva();
			double saldo = _gerContasLocal.getContasDoBanco().get(i).getSaldo();
			
			assertTrue("O saldo deve ser negativo", saldo < 0);
			assertFalse("A conta deve estar inativa", isAtiva);
			
		}
		
		assertEquals("Quantidade de contas no banco com divergencia sobre o que era esperado", 1, _gerContasLocal.getContasDoBanco().size());
	}
}
