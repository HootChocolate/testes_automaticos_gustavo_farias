package negocio;

import static org.junit.Assert.assertNotEquals;
import static org.junit.Assert.assertTrue;

import java.util.ArrayList;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

public class GerContasTest_removerConta {

	GerenciadoraContas gerContas;
	ArrayList<ContaCorrente> listaContas = new ArrayList<ContaCorrente>();
	
	ContaCorrente conta1;
	ContaCorrente conta2;
	ContaCorrente conta3;
	
	
	@Before
	public void setup() {
		/* =============== Criacao do cenario =============== */
		
		conta1 = new ContaCorrente(1, 1000, true);
		conta2 = new ContaCorrente(2, 0, false);
		conta3 = new ContaCorrente(3, 200, true);
		
		listaContas.add(conta1);
		listaContas.add(conta2);
		listaContas.add(conta3);
		
		gerContas = new GerenciadoraContas(listaContas);
		
	}
	
	@After
	public void tearDown() {
		gerContas.removeConta(conta1.getId());
		gerContas.removeConta(conta2.getId());
		gerContas.removeConta(conta3.getId());
	}
	
	/* Teste de remoção de conta, com sucesso na operação
	 * 
	 * @author Willian Ronaldo
	 * @date 17/06/2020
	 * */
	@Test
	public void testRemoverConta() {
		
		int _idContaRemover = 1;
		boolean contaRemovida = false;
		
		for(int i = 0; i < gerContas.getContasDoBanco().size() ; i++ ) {
			ContaCorrente contaParaRemover = gerContas.getContasDoBanco().get(i);
			
			if(contaParaRemover.getId() == _idContaRemover) {
				gerContas.removeConta(_idContaRemover);
				contaRemovida = true;
			}
		}
		
		assertTrue("Erro ao remover conta corrente",contaRemovida);
		
		for(int i = 0; i < gerContas.getContasDoBanco().size() ; i++ ) {
			int _idConta = gerContas.getContasDoBanco().get(i).getId();
			
			assertNotEquals("Erro ao remover conta corrente, vindo da classe de remocao de conta do Gerenciador de Contas", _idConta, _idContaRemover);
		}		
	}
	/* Teste de remoção de conta, com uma conta inexistente
	 * 
	 * @author Willian Ronaldo
	 * @date 17/06/2020
	 * */
	@Test
	public void testRemovetConta_contaInexistente() {
		int _idInexistente = 3;
		
		for(int i = 0; i < gerContas.getContasDoBanco().size(); i++) {
			int _idConta = gerContas.getContasDoBanco().get(i).getId();
			assertNotEquals("Encontrando conta corrente quando nao deveria existir", _idInexistente, _idConta);
		}
	}
	
}
