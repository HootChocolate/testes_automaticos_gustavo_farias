package negocio;

import static org.junit.Assert.assertNotEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameterized.Parameter;
import org.junit.runners.Parameterized.Parameters;

@RunWith(Parameterized.class)
public class GerClienteTest_validaIdade {
	
	// Pode ser utilizado no lugar de um construtor
	
	@Parameter(0) public static int id;
	@Parameter(1) public static String nome;
	@Parameter(2) public static int idade;
	@Parameter(3) public static String email;
	@Parameter(4) public static int idContaCorrente;
	@Parameter(5) public static boolean isAtivo;
	
	@Parameters(name = "Cliente: {1} ][Idade: {2}")
	public static Collection<Object[]> data() {
		return Arrays.asList(new Object[][] {
			{1, "Jose", 18, "jose@jose.com", 12, false},
			{2, "Jose", 18, "jose@jose.com", 12, false},
			{3, "Jose", 64, "jose@jose.com", 12, false},
			{4, "Jose", 65, "jose@jose.com", 12, false},
			{5, "Jose", null, "jose@jose.com", 12, false},
			
		});
	}
	
	@Test
	public void testValidaIdade() throws IdadeNaoPermitidaException {
		Cliente cliente = new Cliente(id, nome, idade, email, idContaCorrente, isAtivo);
		ArrayList<Cliente> listaClientes = new ArrayList<Cliente>();
		
		listaClientes.add(cliente);
		
		GerenciadoraClientes gerClientes = new GerenciadoraClientes(listaClientes);
		assertNotEquals("A idade não pode ser null\n", gerClientes.validaIdade(idade), null);
		assertTrue("Idade inválida!", gerClientes.validaIdade(cliente.getIdade()));
	}
	
}